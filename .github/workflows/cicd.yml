name: CI/CD - Build and Deploy Geofence

on:
  push:
    branches: [ "main" ]

jobs:
  # --- CI Job ---
  # This job just verifies that both the frontend and backend can be built successfully.
  build:
    name: Build Docker Images (CI)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker Images for Validation
        # The 'docker compose build' command is a great way to test if all
        # services defined in the file can be built without errors.
        run: docker compose build

  # --- CD Job ---
  # This job deploys the new versions of the frontend and backend to your server.
  deploy:
    name: Deploy to EC2 (CD)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: SSH and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to the correct project directory on your server
            cd /home/ubuntu/geofence

            echo ">>> Pulling latest code from main branch..."
            git pull origin main

            echo ">>> Creating .env file from GitHub Secrets..."
            # The backend service for Geofence requires a REDIS_URL.
            # This securely writes the secret to the .env file on the server.
            cat <<EOF > .env
            REDIS_URL=${{ secrets.REDIS_URL }}
            EOF

            echo ">>> Rebuilding and restarting Geofence services..."
            # This single command intelligently stops the old frontend and backend,
            # builds the new images, and starts the new containers.
            docker compose up --build -d

            echo ">>> Pruning old Docker images..."
            docker image prune -af

            echo ">>> Geofence deployment successfully completed!"